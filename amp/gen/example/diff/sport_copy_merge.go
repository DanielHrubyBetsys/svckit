// Code generated by go generate; DO NOT EDIT.
package diff

func (o Book) copy() Book {
	mSports := make(map[string]Sport)
	for k, v := range o.Sports {
		mSports[k] = v.copy()
	}
	o.Sports = mSports
	mEvents := make(map[string]Event)
	for k, v := range o.Events {
		mEvents[k] = v.copy()
	}
	o.Events = mEvents
	mItems := make(map[string]Item)
	for k, v := range o.Items {
		mItems[k] = v.copy()
	}
	o.Items = mItems
	return o
}
func (s Sports) merge(s2 Sports) Sports {
	for k, v2 := range s2 {
		v, f := s[k]
		if !f {
			s[k] = v2
			continue
		}
		s[k] = v.merge(v2)
	}
	return s
}
func (s Events) merge(s2 Events) Events {
	for k, v2 := range s2 {
		v, f := s[k]
		if !f {
			s[k] = v2
			continue
		}
		s[k] = v.merge(v2)
	}
	return s
}
func (s Items) merge(s2 Items) Items {
	for k, v2 := range s2 {
		v, f := s[k]
		if !f {
			s[k] = v2
			continue
		}
		s[k] = v.merge(v2)
	}
	return s
}

func (o Book) merge(o2 Book) Book {
	o.Sports = o.Sports.merge(o2.Sports)
	o.Events = o.Events.merge(o2.Events)
	o.Items = o.Items.merge(o2.Items)
	return o
}

func (o Sport) copy() Sport {
	mCategories := make(map[string]Category)
	for k, v := range o.Categories {
		mCategories[k] = v.copy()
	}
	o.Categories = mCategories
	return o
}
func (s Categories) merge(s2 Categories) Categories {
	for k, v2 := range s2 {
		v, f := s[k]
		if !f {
			s[k] = v2
			continue
		}
		s[k] = v.merge(v2)
	}
	return s
}

func (o Sport) merge(o2 Sport) Sport {
	o.Categories = o.Categories.merge(o2.Categories)
	return o
}

func (o Category) copy() Category {
	return o
}

func (o Category) merge(o2 Category) Category {
	return o
}

func (o Event) copy() Event {
	return o
}

func (o Event) merge(o2 Event) Event {
	return o
}

func (o Result) copy() Result {
	return o
}

func (o Result) merge(o2 Result) Result {
	return o
}

func (o Item) copy() Item {
	return o
}

func (o Item) merge(o2 Item) Item {
	return o
}
